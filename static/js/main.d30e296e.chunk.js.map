{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","index.js","components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","className","s","btn","onClick","type","Section","title","children","Statistics","good","neutral","bad","totalFeedback","positiveFeedbackPerce","statisticsList","statisticsItem","totalFeedbackText","perFeedbackText","Notification","message","App","state","handleLeaveFeedback","key","setState","prevState","countTotalFeedback","Object","values","reduce","total","value","countPositiveFeedbackPercentage","Math","round","keys","this","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"sQAeeA,EAZS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,wBACEC,UAAWC,IAAEC,IACbC,QAAS,kBAAMN,EAAgBE,IAE/BK,KAAK,SAJP,SAMGL,GAHIA,OCGIM,EARC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,eAAC,WAAD,WACE,6BAAKD,IACJC,M,gBCoBQC,EAtBI,SAAC,GAMb,IALLC,EAKI,EALJA,KACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,IACAC,EAEI,EAFJA,cACAC,EACI,EADJA,sBAEA,OACE,eAAC,WAAD,WACE,qBAAIb,UAAWC,IAAEa,eAAjB,UACE,qBAAId,UAAWC,IAAEc,eAAjB,mBAAwCN,KACxC,qBAAIT,UAAWC,IAAEc,eAAjB,sBAA2CL,KAC3C,qBAAIV,UAAWC,IAAEc,eAAjB,kBAAuCJ,QAEzC,oBAAGX,UAAWC,IAAEe,kBAAhB,oBAA2CJ,KAC3C,oBAAGZ,UAAWC,IAAEgB,gBAAhB,gCACsBJ,EADtB,WCbSK,EALM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,6BAAKA,KC8D5BC,E,4MApDbC,MAAQ,CACNZ,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPW,oBAAsB,SAAAC,GACpB,EAAKC,UAAS,SAAAC,GAAS,sBAAQF,EAAME,EAAUF,GAAO,O,EAGxDG,mBAAqB,WAInB,OAAOC,OAAOC,OAAO,EAAKP,OAAOQ,QAAO,SAACC,EAAOC,GAAR,OAAkBD,EAAQC,IAAO,I,EAG3EC,gCAAkC,WAChC,IAAQvB,EAAS,EAAKY,MAAdZ,KACFG,EAAgB,EAAKc,qBAE3B,OAAOO,KAAKC,MAAOzB,EAAOG,EAAiB,M,4CAG7C,WACE,IAAMhB,EAAU+B,OAAOQ,KAAKC,KAAKf,OACjC,EAA+Be,KAAKf,MAA5BZ,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,eAAC,WAAD,WACE,cAAC,EAAD,CAASL,MAAM,wBAAf,SACE,cAAC,EAAD,CACEV,QAASA,EACTC,gBAAiBuC,KAAKd,wBAGzBc,KAAKV,qBACJ,cAAC,EAAD,CAASpB,MAAM,aAAf,SACE,cAAC,EAAD,CACEG,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,cAAewB,KAAKV,qBACpBb,sBAAuBuB,KAAKJ,sCAIhC,cAAC,EAAD,CAAcb,QAAQ,6B,GAnDdkB,aCFlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,eAAiB,mCAAmC,eAAiB,mCAAmC,kBAAoB,sCAAsC,gBAAkB,sC,kBCAtMD,EAAOC,QAAU,CAAC,IAAM,gC","file":"static/js/main.d30e296e.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport s from './FeedbackOptions.module.css';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map(option => (\n    <button\n      className={s.btn}\n      onClick={() => onLeaveFeedback(option)}\n      key={option}\n      type=\"button\"\n    >\n      {option}\n    </button>\n  ));\n};\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  key: PropTypes.arrayOf(PropTypes.string.isRequired),\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import { Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <Fragment>\n      <h1>{title}</h1>\n      {children}\n    </Fragment>\n  );\n};\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import { Fragment } from 'react';\n\nimport PropTypes from 'prop-types';\nimport s from './Statistics.module.css';\n\nconst Statistics = ({\n  good,\n  neutral,\n  bad,\n  totalFeedback,\n  positiveFeedbackPerce,\n}) => {\n  return (\n    <Fragment>\n      <ul className={s.statisticsList}>\n        <li className={s.statisticsItem}>Good: {good}</li>\n        <li className={s.statisticsItem}>Neutral: {neutral}</li>\n        <li className={s.statisticsItem}>Bad: {bad}</li>\n      </ul>\n      <p className={s.totalFeedbackText}>Total: {totalFeedback}</p>\n      <p className={s.perFeedbackText}>\n        Positive feedback: {positiveFeedbackPerce}%\n      </p>\n    </Fragment>\n  );\n};\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  totalFeedback: PropTypes.number.isRequired,\n  positiveFeedbackPerce: PropTypes.number.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => <h2>{message}</h2>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\nexport default Notification;\n","import { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Statistics from './components/Statistics';\nimport Notification from './components/Notification';\n\nclass App extends Component {\n  static propTypes = {\n    key: PropTypes.arrayOf(PropTypes.number.isRequired),\n  };\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleLeaveFeedback = key => {\n    this.setState(prevState => ({ [key]: prevState[key] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    // const { good, neutral, bad } = this.state;\n    // return good + neutral + bad;\n\n    return Object.values(this.state).reduce((total, value) => total + value, 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    const totalFeedback = this.countTotalFeedback();\n\n    return Math.round((good / totalFeedback) * 100);\n  };\n\n  render() {\n    const options = Object.keys(this.state);\n    const { good, neutral, bad } = this.state;\n    return (\n      <Fragment>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.handleLeaveFeedback}\n          />\n        </Section>\n        {this.countTotalFeedback() ? (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              totalFeedback={this.countTotalFeedback()}\n              positiveFeedbackPerce={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Fragment>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticsList\":\"Statistics_statisticsList__3g0Jp\",\"statisticsItem\":\"Statistics_statisticsItem__gqpSc\",\"totalFeedbackText\":\"Statistics_totalFeedbackText__3daPk\",\"perFeedbackText\":\"Statistics_perFeedbackText__1vcLv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"FeedbackOptions_btn__3TEX0\"};"],"sourceRoot":""}